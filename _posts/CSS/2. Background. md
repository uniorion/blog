###### Front-End study

---

## Background

 
* `selector {background: (color) (url) (repeat) (attachment) (position)}`
* 속성 값을 설정할 때 공백을 포함한다면 반드시 ""로 감싸야 한다.
* 콘텐츠이미지 vs 배경이미지 
    - 의미가 있고 변경이 자주되는 이미지는 컨텐츠 이미지로 사용
    - UI요소 같이 추가 변경이 많이 없는 이미지들은 배경이미지로 스프라이트 처리해서 사용하는것이 좋다.

> ※ 스프라이트 이미지를 사용하는 이유 : 이미지파일이 하나씩 늘어날수록 서버로의 요청횟수와<br>
> 파일용량이 증가하게 되어 렌더링 성능저하로 이어지기 때문에 하나의 이미지 파일로 묶어 <br>
> 성능저하를 최소한으로 하기 위해서.<br>



#### # 배경이미지를 고정하는 방법 중
* position:fixed 보다 attachment:fixed 를 사용하는것이 성능에 많은 향상을 가져올 수 있다.

#### # 속기형 
> 기본값:#000 none repeat left top scroll border-box padding-box


#### # background-clip
* 백그라운드 `배경색과 배경 이미지`가 적용될 박스 범위를 지정
* border-box(기본), padding-box, content-box

#### # background-origin 
* 백그라운드 `이미지`가 적용될 박스 범위
* padding-box(기본), border-box, content-box

#### # background-size
* cover, contain, px, %, em, rem
    - cover 이미지 크기 비율을 그대로 유지한 상태에서 이미지가 들어 있는 영역의 가로 또는 세로에 이미지를 맞춘다.(가로와 세로 중 큰 값에 맞춘다)
    - contain 이미지 크기 비율을 그대로 유지한 상태에서 원하는 영역에 전체 이미지가 들어가도록 가장 작은 크기로 이미지 스케일을 조정한다.(가로와 세로 중 큰 값에 맞춘다)
* 큰 배경을 작게 줄이는것은 성능상 좋지 않다. > 각 사이즈에 맞는 이미지를 제공하는것이 좋다.
* %, px, 등으로 사이즈를 적용하는것은 이미지 왜곡이 생길 수 있어 조심해야 한다.

#### # background 속기형 작성
```css
 selector {background: (color) (url) (repeat) (attachment) (position)}
```
